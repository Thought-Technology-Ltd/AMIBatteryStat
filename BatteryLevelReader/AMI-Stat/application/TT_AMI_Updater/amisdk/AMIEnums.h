/******************************************************************************
Project:	Advanced MyoTrac Infiniti (AMI)
SubProject:	AMICmds
File name:	AMIEnums.h
Function:	Enumeration definitions for command contents.

Date:	25/10/2017
********************************************************************************/
#pragma once

typedef enum
{
	OPERATION_SUCCESS = 0,
	INVALID_JSON_SYNTAX = 1,
	INVALID_COMMAND_ID = 2,
	INVALID_PARAMETERS = 3,
	INVALID_PARAMETERS_VALUES = 4,
	INVALID_SESSION_CONFIGURATION = 5,
	UNSUPPORTED_OPERATION_MODE = 6,
	FEATURE_NOT_SUPPORTED = 7,
	DEVICE_IS_BUSY = 8,
	OPERATION_FAILURE = 9,
	NO_CONNECTION_ESTABLISHED = 10,
	STIM_ERROR_INVALID_COMMAND = 99,
	STIM_ERROR_INVALID_ARGUMENTS = 100,
	STIM_ERROR_WRONG_NUMBER_OF_ARGUMENTS = 101,
	STIM_ERROR_INVALID_CHANNEL = 102,
	STIM_ERROR_INVALID_CURRENT = 103,
	STIM_ERROR_CHANNEL_NOT_ENABLED = 104,
	STIM_ERROR_CHANNEL_MODALITY_NOT_SET = 105,
	STIM_ERROR_INVALID_STIM_PARAMS = 106,	
	STIM_ERROR_SEQUENCE_IS_NULL = 201,
	STIM_ERROR_NAME_INVALID = 202,
	STIM_ERROR_WAVEFORM_INVALID = 203,
	STIM_ERROR_ADJUSTEMENT_INVALID = 204,
	STIM_ERROR_WRONG_STATE = 300,
	STIM_ERROR_CHANNEL_NOT_STOPPED = 301,
	STIM_ERROR_CHANNEL_NOT_READY = 302,
	STIM_ERROR_CHANNEL_STARTING = 340,
	STIM_ERROR_CURRENT_ADJUSTEMENT_NOT_SAFE = 400,
	STIM_ERROR_CURRENT_NOT_SAFE_FOR_SEQUENCE = 401,
	STIM_ERROR_POWER_NOT_ENABLED = 402

}TTL_CommandResponseCode;


typedef	enum
{
	SCAN_QUERY,
	SCAN_FAST
} TTL_ScanMode;


typedef	enum
{
	UNKNOWN_FAILURE = 0,
	BATTERY_VOLTAGE_FAILURE = 1,
	BATTERY_FAILURE = 2,
	//RESERVED = 3,
	//RESERVED = 4,
	//RESERVED = 5,
	//RESERVED = 6,
	//RESERVED = 7,
	//RESERVED = 8,
	//RESERVED = 9,
	STIM_KEEP_ALIVE_FAILURE = 10,
	STIM_TEMPERATURE_FAILURE = 11,
	STIM_INTERNAL_OPERATION_FAILURE = 12,
	STIM_CURRENT_MISSMATCH_FAILURE = 13,
	STIM_FMAE_FAILURE = 14,
	STIM_ASYMMETRICAL_PULSE_FAILURE = 15,
	STIM_BOOTED = 16,
	STIM_TOUCHPAD_FAILURE = 17
} TTL_CriticalErrorCode;

typedef enum
{
	STIM_MODE_SYNCHRONOUS,
	STIM_MODE_ALTERNATING,
	STIM_MODE_CONTINUOUS
} TTL_StimMode;

typedef enum
{
	STIM_PATTERN_CONTINUOUS,
	STIM_PATTERN_BURST,
	STIM_PATTERN_MODULATED1,
	STIM_PATTERN_MODULATED2,
	STIM_PATTERN_MODULATED3
}
TTL_StimPattern;

typedef enum {
	ODD,
	EVEN
}TTL_StimAltPos;

typedef enum {
	NO_MODALITY,
	NMES_MODALITY,
	TENS_MODALITY,
	MET_MODALITY
}TTL_StimModality;

typedef enum {
	NO_SESSION,
	STIM_SESSION,
	BIOFEEDBACK_SESSION,
	ETS_SESSION,
	RETS_SESSION //Saebo only
}TTL_SessionType;


typedef enum TTL_OperationMode
{
	COMPUTERIZED,
	REMOTE_CONTROL,
	AUTONOMOUS,
}
TTL_OperationModeTag;

typedef enum
{
	RAW,
	RMS
}
TTL_EMGType;

typedef enum
{
	MODE_DISABLED,
	MODE_EMG,
	MODE_STIM

}TTL_ChannelMode;

typedef enum
{
	STATUS_READY,
	STATUS_SESSIONRUNNING,
	STATUS_CRITICALERROR,
	STATUS_BUSY
}
TTL_DeviceStatus;

typedef enum
{
	SESSION_STATUS_IDLE,
	SESSION_STATUS_PRE_TEST,
	SESSION_STATUS_USER_SETUP,
	SESSION_STATUS_RUNNING,
	SESSION_STATUS_PAUSED,
	SESSION_STATUS_POST_TEST,
	SESSION_STATUS_END

}TTL_SessionStatus;

typedef enum
{
	USER,
	SESSION_END,
	PATIENT_DETECTED,
	CURRENT_TRIP,
	SESSION_ERROR

}TTL_SessionStatusChangedCause;

typedef enum
{
	NOTCH_NONE  = 0,
	NOTCH_50Hz = 50,
	NOTCH_60Hz = 60
}
TTL_NotchFrequency;

typedef enum
{
	PHASE_WORK,//for sync
	PHASE_RELAX,//
	PHASE_REST,//for sync
	PHASE_STIM,//for continuous
	PHASE_STIMALT1,
	PHASE_STIMALT2,
	PHASE_PAUSE,
	PHASE_OFF,
} TTL_PhaseStatus;


typedef enum 
{
	PROP_INC_ABOVE_THRES,
	PROP_DEC_ABOVE_THRES,
	PROP_INC_BELOW_THRES,
	PROP_DEC_BELOW_THRES,
	SINGLE_SND_ABOVE_THRES,
	SINGLE_SND_BELOW_THRES,
	CONT_SND_ABOVE_THRES,
	CONT_SND_BELOW_THRES
} TTL_AudioType;

typedef enum
{
	THRESHOLD_A,
	THRESHOLD_B,
	THRESHOLD_ETS,
	THRESHOLD_RETS_ACT,
	THRESHOLD_RETS_DEACT

} TTL_ThresholdType;

typedef enum 
{
	TTL_Channel_INVALID = -1,
	TTL_Channel_A		= 0,
	TTL_Channel_B		= 1,
	TTL_Channel_C		= 2,
	TTL_Channel_D		= 3,
	TTL_Channel_Max		= 4
} TTL_Channel;

typedef enum  {
	TTL_GROUP_AB = 0,
	TTL_GROUP_CD = 1,
	TTL_GROUP_A = 2,
	TTL_GROUP_B = 3,
	TTL_GROUP_C = 4,
	TTL_GROUP_D = 5,

} TTL_ChannelGroup;

typedef enum
{
	SensorRefused = -1,
	SensorUnknown  = 0,
	SensorAccepted = 1

}TTL_SensorStatus;

typedef enum {
	TTL_SP_1,
	TTL_SP_12_5,
	TTL_SP_25,
	TTL_SP_100,
	TTL_SN_12_5,
	TTL_SP_DC
}TTL_ConfigFault;

typedef enum 
{
	BASIC = 0,
	EXTENDED = 1,
	SAEBO = 2
} AMI_ProductType;


typedef enum
{
	TTL_UNKNOWN_UNIT,
	TTL_POTENTIAL_MICROVOLT,
	TTL_POTENTIAL_MILIVOLT,
	TTL_POTENTIAL_VOLT,
	TTL_PRESSURE_MILIBAR,
	TTL_PRESSURE_MMHG,
} TTL_UNIT;

typedef enum
{
	TTL_UNKNOWN_CAT,
	TTL_POTENTIAL,
	TTL_PRESSURE
} TTL_UNIT_SET;


typedef enum
{
#ifndef TTL_SENSORS_DEFINED
	TTLAPI_SENS_TYPE_ENCODER_OFFLINE = -1,
	TTLAPI_SENS_TYPE_UNKNOWN = 0,
	TTLAPI_SENS_TYPE_UNCONNECTED = 1,
#endif
	TTLAPI_SENS_TYPE_EXG = 1000,
	TTLAPI_SENS_TYPE_PRESSURE = 1001

} TTL_SENSOR_TYPE;